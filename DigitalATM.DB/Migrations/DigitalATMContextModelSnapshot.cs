// <auto-generated />
using System;
using DigitalATM.DB.Modelss;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalATM.DB.Migrations
{
    [DbContext(typeof(DigitalATMContext))]
    partial class DigitalATMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DigitalATM.DB.Modelss.AccountAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountActions");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.AccountModel.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("BankAccNumber")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"), 1L, 1);

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BankId");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.ClientModel.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("HomeNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.CreditCardModel.CreditCard", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CardCvv")
                        .HasColumnType("int")
                        .HasColumnName("CardCVV");

                    b.Property<DateTime?>("CardExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CardHolder")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CardNumber")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("AccountId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Deposits.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DepositDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Deposit", (string)null);
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Loans.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("DepositAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Savings.Saving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("SaveName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Savings");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("RecivingAccountId")
                        .HasColumnType("int");

                    b.Property<int>("SendingAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transfer", (string)null);
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Withdraw.WithDraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WithdrawDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("WithDraw", (string)null);
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.AccountAction", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("AccountActions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountActions_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.AccountModel.Account", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Bank");

                    b.HasOne("DigitalATM.DB.Modelss.ClientModel.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Clients");

                    b.Navigation("Bank");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.CreditCardModel.CreditCard", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("CreditCards")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_CreditCards_Account1");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Deposits.Deposit", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Deposit_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Loans.Loan", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Loans_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Savings.Saving", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("Savings")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Savings_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Transfer", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("Transfers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Transfer_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Withdraw.WithDraw", b =>
                {
                    b.HasOne("DigitalATM.DB.Modelss.AccountModel.Account", "Account")
                        .WithMany("WithDraws")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_WithDraw_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.AccountModel.Account", b =>
                {
                    b.Navigation("AccountActions");

                    b.Navigation("CreditCards");

                    b.Navigation("Deposits");

                    b.Navigation("Loans");

                    b.Navigation("Savings");

                    b.Navigation("Transfers");

                    b.Navigation("WithDraws");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.Bank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DigitalATM.DB.Modelss.ClientModel.Client", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
